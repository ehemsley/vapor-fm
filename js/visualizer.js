// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Visualizer = (function() {
    function Visualizer(audioInitializer) {
      this.Update = bind(this.Update, this);
      var i;
      this.audioInitializer = audioInitializer;
      this.timer = 0;
      this.xRotationDirection = 1;
      this.yRotationDirection = -1;
      this.scene = new THREE.Scene;
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.cube = this.Cube();
      this.lineBoxes = this.LineBoxes();
      this.scene.add(this.cube);
      i = 0;
      while (i < this.lineBoxes.length) {
        this.scene.add(this.lineBoxes[i]);
        i++;
      }
      this.beatDistortionEffect = true;
      this.camera.position.z = 6;
      return;
    }

    Visualizer.prototype.Cube = function() {
      var cube, geometry, material;
      geometry = new THREE.BoxGeometry(3, 3, 3);
      material = new THREE.MeshBasicMaterial({
        color: 0xffffff,
        wireframe: false
      });
      cube = new THREE.Mesh(geometry, material);
      return cube;
    };

    Visualizer.prototype.LineBoxes = function() {
      var i, lineBox, lineBoxGeometry, lineBoxes, lineMaterial;
      lineMaterial = new THREE.LineBasicMaterial({
        color: 0xffffff
      });
      lineBoxes = [];
      i = 0;
      while (i < 20) {
        lineBoxGeometry = new THREE.Geometry;
        lineBoxGeometry.vertices.push(new THREE.Vector3(-20, 10, -10));
        lineBoxGeometry.vertices.push(new THREE.Vector3(20, 10, -10));
        lineBoxGeometry.vertices.push(new THREE.Vector3(20, -10, -10));
        lineBoxGeometry.vertices.push(new THREE.Vector3(-20, -10, -10));
        lineBoxGeometry.vertices.push(new THREE.Vector3(-20, 10, -10));
        lineBox = new THREE.Line(lineBoxGeometry, lineMaterial);
        lineBoxes[i] = lineBox;
        i++;
      }
      return lineBoxes;
    };

    Visualizer.prototype.Update = function() {
      var i, rotationAddition, scaleValue;
      this.timer += 0.01;
      rotationAddition = this.audioInitializer.GetAverageVolume(this.audioInitializer.frequencyData) / 2000;
      this.cube.rotation.x += (0.01 + rotationAddition) * this.xRotationDirection;
      this.cube.rotation.y += (0.01 + rotationAddition) * this.yRotationDirection;
      scaleValue = 1.1;
      if (this.audioInitializer.beatdetect.isKick()) {
        this.cube.scale.x = scaleValue;
        this.cube.scale.y = scaleValue;
        this.cube.scale.z = scaleValue;
        this.xRotationDirection = Math.random() < 0.5 ? -1 : 1;
        this.yRotationDirection = Math.random() < 0.5 ? -1 : 1;
      } else {
        this.cube.scale.x = Math.max(this.cube.scale.x - 0.001, 1);
        this.cube.scale.y = Math.max(this.cube.scale.y - 0.001, 1);
        this.cube.scale.z = Math.max(this.cube.scale.z - 0.001, 1);
      }
      i = 0;
      while (i < this.lineBoxes.length) {
        this.lineBoxes[i].scale.x = ((this.timer + (i * 0.5)) * 0.2) % 1.5;
        this.lineBoxes[i].scale.y = ((this.timer + (i * 0.5)) * 0.2) % 1.5;
        i++;
      }
    };

    return Visualizer;

  })();

}).call(this);
