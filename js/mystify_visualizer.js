// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.MystifyVisualizer = (function() {
    function MystifyVisualizer(audioInitializer) {
      this.Update = bind(this.Update, this);
      var i, j, len, len1, quadrilateral, ref, ref1;
      this.audioInitializer = audioInitializer;
      this.timer = 0;
      this.scene = new THREE.Scene;
      this.camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, 0.1, 1000);
      this.bloomParams = {
        strength: 10,
        kernelSize: 6,
        sigma: 1.1,
        resolution: 512
      };
      this.noiseAmount = 0.0;
      this.quadrilateralOne = this.Quadrilateral();
      this.quadrilateralTwo = this.Quadrilateral();
      ref = this.quadrilateralOne.quadrilaterals;
      for (i = 0, len = ref.length; i < len; i++) {
        quadrilateral = ref[i];
        this.scene.add(quadrilateral.line);
      }
      ref1 = this.quadrilateralTwo.quadrilaterals;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        quadrilateral = ref1[j];
        this.scene.add(quadrilateral.line);
      }
      this.skyBox = this.SkyBox();
      this.scene.add(this.skyBox);
      this.camera.position.z = 6;
      return;
    }

    MystifyVisualizer.prototype.Quadrilateral = function() {
      return new MystifyQuadrilateral(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2);
    };

    MystifyVisualizer.prototype.SkyBox = function() {
      var geometry, material, skybox;
      geometry = new THREE.BoxGeometry(window.innerWidth, window.innerHeight, 500);
      material = new THREE.MeshBasicMaterial({
        color: 0x000003,
        side: THREE.BackSide
      });
      skybox = new THREE.Mesh(geometry, material);
      return skybox;
    };

    MystifyVisualizer.prototype.Update = function(deltaTime) {
      var currentOpacity, i, newMax, previousMax, quadCounter, ref, ref1;
      if (deltaTime != null) {
        this.quadrilateralOne.Update(deltaTime);
        this.quadrilateralTwo.Update(deltaTime);
        previousMax = 0;
        quadCounter = 0;
        for (newMax = i = 0, ref = this.audioInitializer.beatdetect.detectSize(), ref1 = Math.floor(this.audioInitializer.beatdetect.detectSize() / 5); ref1 > 0 ? i <= ref : i >= ref; newMax = i += ref1) {
          if (this.audioInitializer.beatdetect.isRange(previousMax, newMax, 4)) {
            this.quadrilateralOne.quadrilaterals[quadCounter].line.material.opacity = 1.0;
            this.quadrilateralTwo.quadrilaterals[quadCounter].line.material.opacity = 1.0;
          } else {
            currentOpacity = this.quadrilateralOne.quadrilaterals[quadCounter].line.material.opacity;
            this.quadrilateralOne.quadrilaterals[quadCounter].line.material.opacity = Math.max(currentOpacity - 0.01, 0.3);
            currentOpacity = this.quadrilateralTwo.quadrilaterals[quadCounter].line.material.opacity;
            this.quadrilateralTwo.quadrilaterals[quadCounter].line.material.opacity = Math.max(currentOpacity - 0.01, 0.3);
          }
          this.quadrilateralOne.quadrilaterals[quadCounter].line.material.needsUpdate = true;
          this.quadrilateralTwo.quadrilaterals[quadCounter].line.material.needsUpdate = true;
          quadCounter += 1;
          previousMax = newMax;
        }
      }
    };

    MystifyVisualizer.prototype.HandleKeyDownInput = function(keyCode) {};

    MystifyVisualizer.prototype.HandleKeyUpInput = function(keyCode) {};

    return MystifyVisualizer;

  })();

}).call(this);
