// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.MystifyQuadrilateral = (function() {
    function MystifyQuadrilateral(leftBound, rightBound, topBound, bottomBound) {
      this.Update = bind(this.Update, this);
      this.Quadrilaterals = bind(this.Quadrilaterals, this);
      var height, width;
      width = Math.abs(leftBound - rightBound);
      height = Math.abs(topBound - bottomBound);
      this.vertexOnePosition = new THREE.Vector3((Math.random() * width) - width * 0.5, height * 0.5, -10);
      this.vertexTwoPosition = new THREE.Vector3(width * -0.5, (Math.random() * height) - height * 0.5, -10);
      this.vertexThreePosition = new THREE.Vector3((Math.random() * width) - width * 0.5, height * -0.5, -10);
      this.vertexFourPosition = new THREE.Vector3(width * 0.5, (Math.random() * height) - height * 0.5, -10);
      console.log(this.vertexOnePosition);
      this.vertexOneVelocity = new THREE.Vector3((Math.random() * 200) - 100, (Math.random() * 100) - 100, 0);
      this.vertexTwoVelocity = new THREE.Vector3((Math.random() * 100) + 100, (Math.random() * 200) - 100, 0);
      this.vertexThreeVelocity = new THREE.Vector3((Math.random() * 200) - 100, (Math.random() * 100) + 100, 0);
      this.vertexFourVelocity = new THREE.Vector3((Math.random() * 100) - 100, (Math.random() * 200) - 100, 0);
      this.leftBound = leftBound;
      this.rightBound = rightBound;
      this.topBound = topBound;
      this.bottomBound = bottomBound;
      this.quadrilaterals = this.Quadrilaterals(4);
      return;
    }

    MystifyQuadrilateral.prototype.Quadrilaterals = function(num) {
      var i, j, quadrilaterals, ref, vertexFour, vertexFourDirection, vertexOne, vertexOneDirection, vertexThree, vertexThreeDirection, vertexTwo, vertexTwoDirection;
      quadrilaterals = [];
      vertexOneDirection = this.vertexOneVelocity.clone().normalize();
      vertexTwoDirection = this.vertexTwoVelocity.clone().normalize();
      vertexThreeDirection = this.vertexThreeVelocity.clone().normalize();
      vertexFourDirection = this.vertexFourVelocity.clone().normalize();
      for (i = j = 0, ref = num - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        vertexOne = this.vertexOnePosition.clone().add(vertexOneDirection.clone().multiplyScalar(i * 20));
        vertexTwo = this.vertexTwoPosition.clone().add(vertexTwoDirection.clone().multiplyScalar(i * 20));
        vertexThree = this.vertexThreePosition.clone().add(vertexThreeDirection.clone().multiplyScalar(i * 20));
        vertexFour = this.vertexFourPosition.clone().add(vertexFourDirection.clone().multiplyScalar(i * 20));
        quadrilaterals.push(new Quadrilateral(vertexOne, vertexTwo, vertexThree, vertexFour, this.vertexOneVelocity.clone(), this.vertexTwoVelocity.clone(), this.vertexThreeVelocity.clone(), this.vertexFourVelocity.clone(), this.leftBound, this.rightBound, this.topBound, this.bottomBound));
      }
      return quadrilaterals;
    };

    MystifyQuadrilateral.prototype.Update = function(deltaTime) {
      var j, len, quadrilateral, ref, results;
      ref = this.quadrilaterals;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        quadrilateral = ref[j];
        results.push(quadrilateral.Update(deltaTime));
      }
      return results;
    };

    return MystifyQuadrilateral;

  })();

}).call(this);
