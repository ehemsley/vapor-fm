// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.RenderController = (function() {
    function RenderController(audioInitializer) {
      this.UpdateEffects = bind(this.UpdateEffects, this);
      this.UpdateAudioAnalyzer = bind(this.UpdateAudioAnalyzer, this);
      this.OnResize = bind(this.OnResize, this);
      this.Render = bind(this.Render, this);
      this.RenderProcess = bind(this.RenderProcess, this);
      this.NextVisualizer = bind(this.NextVisualizer, this);
      this.FadeIn = bind(this.FadeIn, this);
      this.FadeOut = bind(this.FadeOut, this);
      this.FadeToNext = bind(this.FadeToNext, this);
      this.visualizerElement = $('#visualizer');
      this.audioInitializer = audioInitializer;
      this.timer = 0;
      this.renderer = new THREE.WebGLRenderer;
      this.renderer.setClearColor(0x07020a);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.visualizerElement.append(this.renderer.domElement);
      this.visualizers = [new Visualizer(this.audioInitializer), new HeartVisualizer(this.audioInitializer)];
      this.visualizerCounter = 1;
      this.activeVisualizer = this.visualizers[this.visualizerCounter];
      this.fadingIn = false;
      this.fadingOut = false;
      this.fadeValue = 0.0;
      this.RenderProcess(this.activeVisualizer.scene, this.activeVisualizer.camera);
    }

    RenderController.prototype.FadeToNext = function() {
      this.fadingOut = true;
    };

    RenderController.prototype.FadeOut = function() {
      if (this.fadeValue === 1.0) {
        this.fadingOut = false;
        this.NextVisualizer();
        this.fadingIn = true;
      } else {
        this.fadeValue = Math.min(this.fadeValue + 0.01, 1.0);
      }
      this.fade.uniforms['fade'].value = this.fadeValue;
    };

    RenderController.prototype.FadeIn = function() {
      if (this.fadeValue === 0.0) {
        this.fadingIn = false;
      } else {
        this.fadeValue = Math.max(this.fadeValue - 0.01, 0.0);
      }
      this.fade.uniforms['fade'].value = this.fadeValue;
    };

    RenderController.prototype.NextVisualizer = function() {
      this.visualizerCounter = (this.visualizerCounter + 1) % this.visualizers.length;
      this.activeVisualizer = this.visualizers[this.visualizerCounter];
      this.RenderProcess(this.activeVisualizer.scene, this.activeVisualizer.camera);
    };

    RenderController.prototype.RenderProcess = function(scene, camera) {
      var bloomPass, horizontalBlur, renderPass, renderTargetCube, renderTargetGlow, renderTargetParameters, verticalBlur;
      renderTargetParameters = {
        minFilter: THREE.LinearFilter,
        magFilter: THREE.LinearFilter,
        format: THREE.RGBFormat,
        stencilBuffer: false
      };
      renderTargetCube = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, renderTargetParameters);
      this.cubeComposer = new THREE.EffectComposer(this.renderer, renderTargetCube);
      renderPass = new THREE.RenderPass(scene, camera);
      this.cubeComposer.addPass(renderPass);
      renderTargetGlow = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, renderTargetParameters);
      this.glowComposer = new THREE.EffectComposer(this.renderer, renderTargetGlow);
      horizontalBlur = new THREE.ShaderPass(THREE.HorizontalBlurShader);
      horizontalBlur.uniforms['h'].value = 2.0 / window.innerWidth;
      verticalBlur = new THREE.ShaderPass(THREE.VerticalBlurShader);
      verticalBlur.uniforms['v'].value = 2.0 / window.innerHeight;
      this.glowComposer.addPass(renderPass);
      this.glowComposer.addPass(horizontalBlur);
      this.glowComposer.addPass(verticalBlur);
      this.glowComposer.addPass(horizontalBlur);
      this.glowComposer.addPass(verticalBlur);
      this.blendPass = new THREE.ShaderPass(THREE.AdditiveBlendShader);
      this.blendPass.uniforms['tBase'].value = this.cubeComposer.renderTarget1;
      this.blendPass.uniforms['tAdd'].value = this.glowComposer.renderTarget1;
      this.blendPass.uniforms['amount'].value = 2.0;
      this.blendComposer = new THREE.EffectComposer(this.renderer);
      this.blendComposer.addPass(this.blendPass);
      bloomPass = new THREE.BloomPass(3, 12, 2.0, 512);
      this.blendComposer.addPass(bloomPass);
      this.badTV = new THREE.ShaderPass(THREE.BadTVShader);
      this.badTV.uniforms['distortion'].value = 1.0;
      this.badTV.uniforms['distortion2'].value = 1.0;
      this.badTV.uniforms['speed'].value = 0.1;
      this.badTV.uniforms['rollSpeed'].value = 0.0;
      this.blendComposer.addPass(this.badTV);
      this.fade = new THREE.ShaderPass(THREE.FadeToBlackShader);
      this.fade.uniforms['fade'].value = this.fadeValue;
      this.blendComposer.addPass(this.fade);
      this.crtEffect = new THREE.ShaderPass(THREE.CRTShader);
      this.crtEffect.renderToScreen = true;
      this.blendComposer.addPass(this.crtEffect);
    };

    RenderController.prototype.Render = function() {
      requestAnimationFrame(this.Render);
      this.timer += 0.01;
      if (this.fadingOut) {
        this.FadeOut();
      }
      if (this.fadingIn) {
        this.FadeIn();
      }
      this.UpdateAudioAnalyzer();
      this.UpdateEffects();
      this.activeVisualizer.Update();
      this.cubeComposer.render(0.1);
      this.glowComposer.render(0.1);
      this.blendComposer.render(0.1);
    };

    RenderController.prototype.OnResize = function() {
      var i, len, ref, renderH, renderW, visualizer;
      renderW = window.innerWidth;
      renderH = window.innerHeight;
      ref = this.visualizers;
      for (i = 0, len = ref.length; i < len; i++) {
        visualizer = ref[i];
        visualizer.camera.aspect = renderW / renderH;
        visualizer.camera.updateProjectionMatrix();
      }
      this.renderer.setSize(renderW, renderH);
      this.renderer.domElement.width = renderW;
      this.renderer.domElement.height = renderH;
    };

    RenderController.prototype.UpdateAudioAnalyzer = function() {
      this.audioInitializer.analyser.getByteFrequencyData(this.audioInitializer.frequencyData);
      this.audioInitializer.analyser.getFloatTimeDomainData(this.audioInitializer.floats);
      this.audioInitializer.beatdetect.detect(this.audioInitializer.floats);
    };

    RenderController.prototype.UpdateEffects = function() {
      this.badTV.uniforms['time'].value = this.timer;
      if (this.activeVisualizer.beatDistortionEffect) {
        if (this.audioInitializer.beatdetect.isKick()) {
          this.badTV.uniforms['distortion'].value = 5 * Math.random();
          this.badTV.uniforms['distortion2'].value = 5 * Math.random();
          if (Math.random() < 0.05) {
            this.badTV.uniforms['rollSpeed'].value = (Math.random() < 0.5 ? -1 : 1) * this.audioInitializer.GetAverageVolume(this.audioInitializer.frequencyData) / 5000;
          }
        } else {
          this.badTV.uniforms['distortion'].value = Math.max(this.badTV.uniforms['distortion'].value - 0.1, 1);
          this.badTV.uniforms['distortion2'].value = Math.max(this.badTV.uniforms['distortion2'].value - 0.1, 1);
          if (this.badTV.uniforms['rollSpeed'].value > 0) {
            this.badTV.uniforms['rollSpeed'].value = Math.max(this.badTV.uniforms['rollSpeed'].value - 0.001, 0);
          } else {
            this.badTV.uniforms['rollSpeed'].value = Math.min(this.badTV.uniforms['rollSpeed'].value + 0.001, 0);
          }
        }
      }
    };

    return RenderController;

  })();

}).call(this);
