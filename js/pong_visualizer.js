// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.PongVisualizer = (function() {
    function PongVisualizer(audioInitializer) {
      this.ResetBall = bind(this.ResetBall, this);
      this.ResetInputs = bind(this.ResetInputs, this);
      this.PaddleDownInputReleased = bind(this.PaddleDownInputReleased, this);
      this.PaddleUpInputReleased = bind(this.PaddleUpInputReleased, this);
      this.PaddleDownInputPressed = bind(this.PaddleDownInputPressed, this);
      this.PaddleUpInputPressed = bind(this.PaddleUpInputPressed, this);
      this.HandleKeyUpInput = bind(this.HandleKeyUpInput, this);
      this.HandleKeyDownInput = bind(this.HandleKeyDownInput, this);
      this.CheckBallCollision = bind(this.CheckBallCollision, this);
      this.Update = bind(this.Update, this);
      this.audioInitializer = audioInitializer;
      this.scene = new THREE.Scene;
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.bloomParams = {
        strength: 6,
        kernelSize: 6,
        sigma: 1.1,
        resolution: 512
      };
      this.noiseAmount = 0.15;
      this.playerPaddle = this.Paddle();
      this.enemyPaddle = this.Paddle();
      this.rightBound = this.HorizontalBound();
      this.leftBound = this.HorizontalBound();
      this.topBound = this.VerticalBound();
      this.bottomBound = this.VerticalBound();
      this.ball = this.Ball();
      this.ResetBall();
      this.ballCollisionRaycaster = new THREE.Raycaster();
      this.scene.add(this.playerPaddle);
      this.scene.add(this.enemyPaddle);
      this.scene.add(this.ball);
      this.scene.add(this.rightBound);
      this.scene.add(this.leftBound);
      this.scene.add(this.topBound);
      this.scene.add(this.bottomBound);
      this.playerPaddle.position.set(-20, 0, 0);
      this.enemyPaddle.position.set(20, 0, 0);
      this.ball.position.set(0, 0, 0);
      this.rightBound.position.set(22, 0, 0);
      this.leftBound.position.set(-22, 0, 0);
      this.topBound.position.set(0, 15, 0);
      this.bottomBound.position.set(0, -15, 0);
      this.paddleSpeed = 16;
      this.ResetInputs();
      this.camera.position.z = 20;
      return;
    }

    PongVisualizer.prototype.Paddle = function() {
      var geometry, material, paddle;
      geometry = new THREE.BoxGeometry(1, 6, 1);
      material = new THREE.MeshBasicMaterial({
        color: 0xffffff
      });
      paddle = new THREE.Mesh(geometry, material);
      return paddle;
    };

    PongVisualizer.prototype.Ball = function() {
      var ball, geometry, material;
      geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);
      material = new THREE.MeshBasicMaterial({
        color: 0xffffff
      });
      ball = new THREE.Mesh(geometry, material);
      return ball;
    };

    PongVisualizer.prototype.HorizontalBound = function() {
      var geometry, horBound, material;
      geometry = new THREE.BoxGeometry(1, 30, 2);
      material = new THREE.MeshBasicMaterial({
        transparent: true,
        opacity: 0,
        side: THREE.DoubleSide
      });
      horBound = new THREE.Mesh(geometry, material);
      return horBound;
    };

    PongVisualizer.prototype.VerticalBound = function() {
      var geometry, material, verBound;
      geometry = new THREE.BoxGeometry(40, 1, 2);
      material = new THREE.MeshBasicMaterial({
        transparent: true,
        opacity: 0,
        side: THREE.DoubleSide
      });
      verBound = new THREE.Mesh(geometry, material);
      return verBound;
    };

    PongVisualizer.prototype.Update = function(deltaTime) {
      var enemyToBallDistance;
      if (deltaTime != null) {
        if (this.playerPaddleUp) {
          this.playerPaddle.position.y = this.playerPaddle.position.y + this.paddleSpeed * deltaTime;
        } else if (this.playerPaddleDown) {
          this.playerPaddle.position.y = this.playerPaddle.position.y - this.paddleSpeed * deltaTime;
        }
        if (this.ballVelocity.x > 0) {
          enemyToBallDistance = this.ball.position.y - this.enemyPaddle.position.y;
          if (enemyToBallDistance > 2) {
            this.enemyPaddle.position.y = this.enemyPaddle.position.y + this.paddleSpeed * 0.65 * deltaTime;
          } else if (enemyToBallDistance < 2) {
            this.enemyPaddle.position.y = this.enemyPaddle.position.y - this.paddleSpeed * 0.65 * deltaTime;
          }
        }
        this.ball.position.x += this.ballVelocity.x * deltaTime;
        this.ball.position.y += this.ballVelocity.y * deltaTime;
        this.ball.position.z += this.ballVelocity.z * deltaTime;
      }
      this.CheckBallCollision();
    };

    PongVisualizer.prototype.CheckBallCollision = function() {
      var i, intersect, intersectObjects, intersects, len;
      this.ballCollisionRaycaster.set(this.ball.position.clone(), this.ballVelocity.clone().normalize());
      intersects = this.ballCollisionRaycaster.intersectObjects([this.playerPaddle, this.enemyPaddle, this.leftBound, this.topBound, this.rightBound, this.bottomBound]);
      intersectObjects = [];
      for (i = 0, len = intersects.length; i < len; i++) {
        intersect = intersects[i];
        if (intersect.distance < 1.5) {
          if (intersect.object === this.leftBound) {
            this.ResetBall();
            return;
          } else if (intersect.object === this.rightBound) {
            this.ResetBall();
            return;
          } else if (intersect.object === this.topBound) {
            this.ballVelocity.y = -this.ballVelocity.y;
            return;
          } else if (intersect.object === this.bottomBound) {
            this.ballVelocity.y = -this.ballVelocity.y;
            return;
          } else if (intersect.object === this.playerPaddle) {
            this.ballVelocity.x = Math.max(-this.ballVelocity.x + (Math.random() * 10), 8);
            return;
          } else if (intersect.object === this.enemyPaddle) {
            this.ballVelocity.x = Math.min(-this.ballVelocity.x + (Math.random() * -10), -8);
            return;
          }
        }
      }
    };

    PongVisualizer.prototype.HandleKeyDownInput = function(keyCode) {
      if (keyCode === 65) {
        this.PaddleUpInputPressed();
      } else if (keyCode === 90) {
        this.PaddleDownInputPressed();
      }
    };

    PongVisualizer.prototype.HandleKeyUpInput = function(keyCode) {
      if (keyCode === 65) {
        return this.PaddleUpInputReleased();
      } else if (keyCode === 90) {
        return this.PaddleDownInputReleased();
      }
    };

    PongVisualizer.prototype.PaddleUpInputPressed = function() {
      return this.playerPaddleUp = true;
    };

    PongVisualizer.prototype.PaddleDownInputPressed = function() {
      return this.playerPaddleDown = true;
    };

    PongVisualizer.prototype.PaddleUpInputReleased = function() {
      return this.playerPaddleUp = false;
    };

    PongVisualizer.prototype.PaddleDownInputReleased = function() {
      return this.playerPaddleDown = false;
    };

    PongVisualizer.prototype.ResetInputs = function() {
      this.playerPaddleDown = false;
      this.playerPaddleUp = false;
      this.enemyPaddleDown = false;
      return this.enemyPaddleUp = false;
    };

    PongVisualizer.prototype.ResetBall = function() {
      var ballDirection;
      this.ball.position.set(0, 0, 0);
      ballDirection = new THREE.Vector3(Math.random() - 0.5, Math.random() * 0.5 - 0.25, 0);
      return this.ballVelocity = ballDirection.clone().normalize().multiplyScalar(20.0);
    };

    return PongVisualizer;

  })();

}).call(this);
